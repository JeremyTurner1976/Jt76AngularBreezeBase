using System;
using System.Linq;
using System.Net;
using System.Threading;
using System.Web.Helpers;
using Jt76Base.Data.Database;
using Jt76Base.Data.Factories;
using Jt76Base.Data.Models;
using Jt76Base.Ui;
using Jt76Base.Ui.Controllers;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Newtonsoft.Json.Linq;

namespace Jt76Base.Tests.Ui.Controllers
{
    [TestClass()]
    public class BreezeControllerTests
    {
        public Mock<Jt76DbContext> Context { get; set; }
        public Mock<BreezeRepository> Repository { get; set; }
        public BreezeController Controller { get; set; }
        public UiService UiService { get; set; }

        [TestInitialize]
        public void Initialize()
        {
            Context = CommonSetups.GetJt76DbContext();
            Repository = CommonSetups.GetBreezeRepository(Context.Object);
            UiService = CommonSetups.GetUiService();
        }


        [TestMethod()]
        public void MetadataTest()
        {
            var controller = new BreezeController(Repository.Object, UiService);
            string strMetadata = controller.Metadata();
            Assert.IsTrue(strMetadata != null);
            Assert.IsTrue(strMetadata.Length > 0);
        }

        [TestMethod()]
        public void SaveChangesTest()
        {
            var controller = new BreezeController(Repository.Object, UiService);

            //pulled directly from the SaveBundle sent from the client, cleaned '\' from this string
            var saveBundle = JObject.Parse("{'entities': [{'Id': 1,'StrMessage': 'Attempted to divide by zero.123456','StrErrorLevel': 'Critical','StrSource': 'JT76Base.Data|Module| JT76Base.Data.dll     |Class| ErrorFactory','StrAdditionalInformation': 'Switchable local array','StrStackTrace': '   at JT76Base.Data.Factories.ErrorFactory.GetThrownException() in c:UsersJeremyDesktopJT SVNtrunkJt76BaseJT76.DataFactoriesErrorFactory.cs:line 133   at JT76Base.Data.Factories.JtMockFactory.GetErrorMocks(Int32 nCount) in c:UsersJeremyDesktopJT SVNtrunkJt76BaseJT76.DataFactoriesJtMockFactory.cs:line 62rn             |No inner exception| ','DtCreated': '2015-01-31T20:11:47.467Z','entityAspect': {'entityTypeName': 'Error:#Jt76Base.Data.Models','defaultResourceName': 'Errors','entityState': 'Modified','originalValuesMap': {'StrMessage': 'Attempted to divide by zero.123'},'autoGeneratedKey': {'propertyName': 'Id','autoGeneratedKeyType': 'Identity'}}}],'saveOptions': {}}");
            var saveResult = controller.SaveChanges((JObject)saveBundle);

            Assert.IsTrue(saveResult.Entities.Count > 0);
        }

        [TestMethod()]
        public void ErrorsTest()
        {
            var controller = new BreezeController(Repository.Object, UiService);
            var enumerable = controller.Errors();
            Assert.IsTrue(enumerable.Any());
        }

        [TestMethod()]
        public void LogMessagesTest()
        {
            var controller = new BreezeController(Repository.Object, UiService);
            var enumerable = controller.LogMessages();
            Assert.IsTrue(enumerable.Any());
        }

        [TestMethod()]
        public void LookupsTest()
        {
            var controller = new BreezeController(Repository.Object, UiService);
            var lookupObject = controller.Lookups();
            Assert.IsTrue(lookupObject != null);
        }

        [TestMethod()]
        public void LocalWeatherTest()
        {
            var controller = new BreezeController(Repository.Object, UiService);
            var response = controller.LocalWeather();
            Assert.IsTrue(response.ToString().Contains("strSummary"));
        }

        [TestMethod()]
        public void SendEmailTest()
        {
            var controller = new BreezeController(Repository.Object, UiService);
            var response = controller.SendEmail("Sent from the breeze controller unit test.");
            Assert.IsTrue(response.StatusCode.Equals(HttpStatusCode.Accepted));
        }

        [TestMethod()]
        public void PingTest()
        {
            var controller = new BreezeController(Repository.Object, UiService);
            var response = controller.Ping();
            Assert.IsTrue(response.Contains("Pong"));
        }
    }
}
